{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SIZE","TIME","CELL","window","innerWidth","PARTS","IDS","_i","length","x","_i2","y","_i3","z","push","shuffle","a","j","i","Math","floor","random","newGrid","ids","select","k","n","list","oddsWeWantNth","answer","duplicateID","grid","row","id","selected","deselect","map","cell","Object","objectSpread","stringDisplay","s","react_default","createElement","className","onCellClick","setGrid","score","setScore","pausing","setPausing","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","err","return","getSelectedID","Boolean","location","hostname","match","ReactDOM","render","_useState","useState","_useState2","slicedToArray","_useState3","_useState4","_useState5","_useState6","time","setTime","_useState7","_useState8","setTimeout","rowIndex","key","cellIndex","style","backgroundColor","borderColor","height","width","onClick","display","alignItems","justifyContent","flexDirection","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe179d99.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nlet SIZE = 4;\nlet TIME = 45;\nlet CELL = 150;\nif (window.innerWidth < 700) {\n  CELL = 100;\n}\n\n// Let the ids be a bunch of possible colors\nlet PARTS = [\"00\", \"AA\", \"FF\"];\nlet IDS = [];\nfor (let x of PARTS) {\n  for (let y of PARTS) {\n    for (let z of PARTS) {\n      IDS.push(\"#\" + x + y + z);\n    }\n  }\n}\n\n// Copied from SO\nfunction shuffle(a) {\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i--) {\n    j = Math.floor(Math.random() * (i + 1));\n    x = a[i];\n    a[i] = a[j];\n    a[j] = x;\n  }\n  return a;\n}\n\n// Randomly selects k things from the first n elements of the list, no duplicates.\n// Always returns in the same order\nfunction select(k, n, list) {\n  if (k <= 0 || n <= 0) {\n    return [];\n  }\n  let oddsWeWantNth = k / n;\n  if (Math.random() > oddsWeWantNth) {\n    // We don't want the nth item on the list\n    return select(k, n - 1, list);\n  } else {\n    // We do want the nth item on the list\n    let answer = select(k - 1, n - 1, list);\n    answer.push(list[n - 1]);\n    return answer;\n  }\n}\n\nfunction newGrid() {\n  let numCells = SIZE * SIZE;\n\n  // Make a list of ids where one of them is a duplicate\n  let ids = select(numCells - 1, IDS.length, IDS);\n  shuffle(ids);\n  let duplicateID = ids[0];\n  ids.push(duplicateID);\n  shuffle(ids);\n\n  let grid = [];\n  for (let x = 0; x < SIZE; x++) {\n    let row = [];\n    for (let y = 0; y < SIZE; y++) {\n      let index = x * SIZE + y;\n      let id = ids[index];\n      row.push({\n        x: x,\n        y: y,\n        id: id,\n        selected: false\n      });\n    }\n    grid.push(row);\n  }\n  return grid;\n}\n\nfunction deselect(grid) {\n  return grid.map(row =>\n    row.map(cell => {\n      return { ...cell, selected: false };\n    })\n  );\n}\n\nfunction getSelectedID(grid) {\n  for (let row of grid) {\n    for (let cell of row) {\n      if (cell.selected) {\n        return cell.id;\n      }\n    }\n  }\n  return null;\n}\n\nfunction stringDisplay(s) {\n  return (\n    <div className=\"Spacer\">\n      <div className=\"Spacer\">\n        <p>{s}</p>\n      </div>\n      <div className=\"Spacer\" />\n      <div className=\"Spacer\" />\n      <div className=\"Spacer\" />\n    </div>\n  );\n}\n\nfunction onCellClick(\n  cell,\n  grid,\n  setGrid,\n  score,\n  setScore,\n  pausing,\n  setPausing\n) {\n  // Deselecting\n  if (cell.selected) {\n    cell.selected = false;\n    setGrid(deselect(grid));\n    return;\n  }\n\n  // Selecting\n  let current = getSelectedID(grid);\n  if (current !== cell.id) {\n    let newGrid = deselect(grid);\n    newGrid[cell.x][cell.y].selected = true;\n    setGrid(newGrid);\n    return;\n  }\n\n  // Winning\n  setScore(score + 1);\n  setGrid(newGrid());\n}\n\nexport default function render() {\n  let [grid, setGrid] = useState(null);\n  let [score, setScore] = useState(null);\n  let [time, setTime] = useState(null);\n  let [pausing, setPausing] = useState(false);\n\n  if (grid != null) {\n    setTimeout(() => {\n      if (time > 1) {\n        setTime(time - 1);\n      } else {\n        // Time up\n        setPausing(true);\n        setGrid(null);\n        setTimeout(() => {\n          setPausing(false);\n        }, 1000);\n      }\n    }, 1000);\n\n    return (\n      <div className=\"App\">\n        {stringDisplay(score)}\n        <div className=\"Game\">\n          {grid.map((row, rowIndex) => {\n            return (\n              <div className=\"Row\" key={rowIndex}>\n                {row.map((cell, cellIndex) => {\n                  return (\n                    <div\n                      className=\"Cell\"\n                      key={cellIndex}\n                      style={{\n                        backgroundColor: cell.id,\n                        borderColor: cell.selected ? \"#FFFFFF\" : \"#000000\",\n                        height: CELL + \"px\",\n                        width: CELL + \"px\"\n                      }}\n                      onClick={() =>\n                        onCellClick(cell, grid, setGrid, score, setScore)\n                      }\n                    />\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n        {stringDisplay(time)}\n      </div>\n    );\n  }\n\n  // Getting started screen\n  return (\n    <div\n      className=\"App\"\n      onClick={() => {\n        if (pausing) {\n          return;\n        }\n        setScore(0);\n        setTime(TIME);\n        setGrid(newGrid());\n      }}\n    >\n      <header\n        style={{\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          flexDirection: \"column\"\n        }}\n      >\n        {score === null ? (\n          <p>Welcome to KIDRUSH</p>\n        ) : (\n          <p>Your score was {score}.</p>\n        )}\n        <p>Find as many matches as you can before time runs out.</p>\n        <p>Tap anywhere to begin!</p>\n      </header>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}